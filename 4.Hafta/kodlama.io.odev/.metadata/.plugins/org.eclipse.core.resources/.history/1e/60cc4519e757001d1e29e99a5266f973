package kodlama.io.Kodlama.io.Devs.business.concretes;


import java.util.List;

import org.hibernate.loader.entity.NaturalIdEntityJoinWalker;
import org.springframework.beans.factory.annotation.Autowired;

import kodlama.io.Kodlama.io.Devs.business.abstracts.SoftwareLanguageService;
import kodlama.io.Kodlama.io.Devs.dataAccess.abstracts.SoftwareLanguageRepository;
import kodlama.io.Kodlama.io.Devs.entities.concretes.SoftwareLanguage;


public class SoftwareLanguageManager implements SoftwareLanguageService{
	
	private SoftwareLanguageRepository softwareLanguageRepository;
	List<SoftwareLanguage> languages;
	 
	
	public SoftwareLanguageManager(SoftwareLanguageRepository softwareLanguageRepository,
			List<SoftwareLanguage> languages) {
		super();
		this.softwareLanguageRepository = softwareLanguageRepository;
		this.languages = languages;
	}
	
	
	public boolean isNameExist (SoftwareLanguage softwareLanguage) throws Exception{
		for (SoftwareLanguage lng:softwareLanguageRepository.getall()) {
			if (lng.getName().equals(softwareLanguage.getName())) {
				return true;
			}
			
			if (lng.getName().isEmpty()) {
				throw new Exception("İsim boş olamaz!");
			}
		}
		languages.add(softwareLanguage);
		return false;
		
	
	
	}	
	public boolean isIdExist (int id) {
		for (SoftwareLanguage lng:languages) {
			if (lng.getId() == id ) {
				return true;
			}
		}
		return false;
	}
	
	
	
	
	@Override
	public List<SoftwareLanguage> getall() {
		
		return softwareLanguageRepository.getall();
	}



	@Override
	public void add(SoftwareLanguage softwareLanguage) throws Exception{
		if (isNameExist(softwareLanguage)) {
			throw new Exception("İsim tekrar edemez.");
		}
		if (isIdExist(softwareLanguage.getId())) {
			throw new Exception("İd tekrar edemez.");
		}
		softwareLanguageRepository.add(softwareLanguage);

	}
	@Override
	public void delete(int id) throws Exception {
		if (!isIdExist(id)) {
			throw new Exception("Kimlik bulanamadı.");
		}
		softwareLanguageRepository.delete(id);
	}



	@Override
	public void update(SoftwareLanguage softwareLanguage) throws Exception {
		if (!isIdExist(softwareLanguage.getId())) {
			throw new Exception("Kimlik bulunamadı.");
		}
		if (isNameExist(softwareLanguage)) {
			throw new Exception("İsim zaten mevcut.");
		}
		
}




	@Override
	public SoftwareLanguage getIdLanguage(int id, SoftwareLanguage softwareLanguage) {
		// TODO Auto-generated method stub
		return null;
	}



	@Override
	public SoftwareLanguage getIdLanguage(int id) {
		// TODO Auto-generated method stub
		return null;
	}

}